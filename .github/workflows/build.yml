name: Build project

on:
  pull_request: {}
  push: {}

env:
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}

jobs:
  default_Builder:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.3.3f1
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          #- Android # Build an Android .apk standalone app.
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Get cached libraries
        uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
      - name: Build
        uses: webbertakken/unity-builder@v0.11
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.targetPlatform }}
          path: build

  iOS_Builder:
    name: Build iOS IPA
    runs-on: macos-latest
    needs: [default_Builder]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: iOS
          path: xcode
      - name: Install XCode
        uses: sinoru/actions-setup-xcode@v1.1
        with:
          xcode-version: '11.4' # Exact version of a Xcode version to use
          apple-id: ${{ secrets.APPLE_EMAIL }} # Apple ID to download from Apple Developer when Xcode not available in local
          apple-id-password: ${{ secrets.APPLE_PASSWORD }}
      - name: Install xcbeautify
        uses: Cyberbeni/install-swift-tool@v1
        with:
          url: https://github.com/Cyberbeni/xcbeautify
      - run: chmod -R 777 xcode/iOS/iOS/
      - name: Build Archive
        run: set -o pipefail && xcodebuild -project xcode/iOS/iOS/Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Debug -sdk iphoneos -parallelizeTargets -quiet -archivePath build/archive.xcarchive archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGN_ENTITLEMENTS="" CODE_SIGNING_ALLOWED="NO" | xcbeautify -q
      - run: echo '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n<dict>\n<key>method</key>\n<string>app-store</string>\n</dict>\n</plist>' >> ExportOptions.plist
      - name: Build IPA
        run: xcodebuild -quiet -exportArchive -exportOptionsPlist exportOptions.plist -archivePath build/archive.xcarchive -exportPath build/XCode/Suivi-Scolaire.ipa | xcbeautify -q
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: iOS IPA
          path: build/XCode
