name: Build project

on:
  pull_request: {}
  push: {}

jobs:
  unity_Builder:
    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    env:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.3.3f1
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          #- Android # Build an Android .apk standalone app.
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Cached libraries
        uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
      - name: Build
        uses: webbertakken/unity-builder@v1.x
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: None
          androidVersionCode: 0
          androidKeystoreName: Suivi-Scolaire.keystore
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: suivi-scolaire
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.targetPlatform }}
          path: build
  
  iOS_Builder:
    name: Build iOS App
    runs-on: macos-latest
    needs: [unity_Builder]
    timeout-minutes: 30
    steps:
      - name: Download XCode Project
        uses: actions/download-artifact@v1.0.0
        with:
          name: iOS
          path: xcode

      - name: "Download XCode"
        uses: devbotsxyz/xcode-select@main

      - name: "Import Certificate"
        uses: devbotsxyz/import-signing-certificate@main
        with:
          certificate-data: ${{ secrets.APPLE_CERTIFICATE_DATA }}
          certificate-passphrase: ${{ secrets.APPLE_CERTIFICATE_PASSPHRASE }}
          keychain-password: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}

      # First we do a developer build that we archive into an .xcarchive.
      - name: "Archive"
        uses: devbotsxyz/xcode-archive@v1
        with:
          project: xcode/iOS/iOS/Unity-iPhone.xcodeproj

      # Next ask Xcode to export the product from the archived build we just created. This will also re-sign the application with the "Developer ID" certificate.
      - name: "Export & Sign Release Build"
        uses: devbotsxyz/xcode-export-archive@main
        with:
          export-method: development
  
      - name: Upload IPA
        uses: actions/upload-artifact@v1
        with:
          name: iOS Export
          path: Export
